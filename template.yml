AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Text extraction API, web client, and services.

Transform:
- AWS::Serverless-2016-10-31

Parameters:
  ParameterLogicalID:
    Type: DataType
    ParameterProperty: value

Parameters:
  ParameterTextExtractionDBResourceId:
    Type: String
  ParameterTextExtractionDBHost:
    Type: String   
  ParameterTextExtractionDBPort:
    Type: Number
  ParameterTextExtractionDBRegion:
    Type: String
  ParameterTextExtractionDBName:
    Type: String
  ParameterTextExtractionDBUsername:
    Type: String
  ParameterDefaultLogLevel:
    Type: String
    Default: INFO
  ParameterDefaultEnvironment:
    Type: String
    Default: PROD

Resources:
  # API RESOURCES
  GetDocumentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/src
      Handler: handlers/get-documents.getDocumentsHandler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Environment:
        Variables:
          LOG_LEVEL: !Ref ParameterDefaultLogLevel
          ENVIRONMENT: !Ref ParameterDefaultEnvironment
          TEXTEXTRACTION_HOST: !Ref ParameterTextExtractionDBHost
          TEXTEXTRACTION_PORT: !Ref ParameterTextExtractionDBPort
          TEXTEXTRACTION_REGION: !Ref ParameterTextExtractionDBRegion
          TEXTEXTRACTION_DATABASE: !Ref ParameterTextExtractionDBName
          TEXTEXTRACTION_USERNAME: !Ref ParameterTextExtractionDBUsername
      Policies:
        -
          Version:  '2012-10-17'
          Statement:
            - Effect: Allow
              Action: rds-db:connect
              Resource: !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:${ParameterTextExtractionDBResourceId}/${ParameterTextExtractionDBUsername}"
      VpcConfig:
        SecurityGroupIds:
          - sg-073682cf5309adfc0
        SubnetIds:
          - subnet-52eba079
          - subnet-2a16c577
          - subnet-dcb272a4
          - subnet-e96a88a3              
      Events:
        Api:
          Type: Api
          Properties:
            Path: /documents/
            Method: GET

  GetDocumentByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/src
      Handler: handlers/get-document-by-id.getByIdHandler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Environment:
        Variables:
          DOCUMENT_BUCKET: !Ref MainDocumentBucket
          PROCESSED_BUCKET: !Ref ProcessedDocumentBucket
          LOG_LEVEL: !Ref ParameterDefaultLogLevel
          ENVIRONMENT: !Ref ParameterDefaultEnvironment
          TEXTEXTRACTION_HOST: !Ref ParameterTextExtractionDBHost
          TEXTEXTRACTION_PORT: !Ref ParameterTextExtractionDBPort
          TEXTEXTRACTION_REGION: !Ref ParameterTextExtractionDBRegion
          TEXTEXTRACTION_DATABASE: !Ref ParameterTextExtractionDBName
          TEXTEXTRACTION_USERNAME: !Ref ParameterTextExtractionDBUsername
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref MainDocumentBucket
        - S3ReadPolicy:
            BucketName: !Ref ProcessedDocumentBucket            
        -
          Version:  '2012-10-17'
          Statement:
            - Effect: Allow
              Action: rds-db:connect
              Resource: !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:${ParameterTextExtractionDBResourceId}/${ParameterTextExtractionDBUsername}"          
      VpcConfig:
        SecurityGroupIds:
          - sg-073682cf5309adfc0
        SubnetIds:
          - subnet-52eba079
          - subnet-2a16c577
          - subnet-dcb272a4
          - subnet-e96a88a3              
      Events:
        Api:
          Type: Api
          Properties:
            Path: /documents/{id}
            Method: GET

  DeleteDocumentByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/src
      Handler: handlers/delete-document-by-id.deleteByIdHandler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: Mark document item as deleted.
      Environment:
        Variables:
          LOG_LEVEL: !Ref ParameterDefaultLogLevel
          ENVIRONMENT: !Ref ParameterDefaultEnvironment
          TEXTEXTRACTION_HOST: !Ref ParameterTextExtractionDBHost
          TEXTEXTRACTION_PORT: !Ref ParameterTextExtractionDBPort
          TEXTEXTRACTION_REGION: !Ref ParameterTextExtractionDBRegion
          TEXTEXTRACTION_DATABASE: !Ref ParameterTextExtractionDBName
          TEXTEXTRACTION_USERNAME: !Ref ParameterTextExtractionDBUsername
      Policies:
        -
          Version:  '2012-10-17'
          Statement:
            - Effect: Allow
              Action: rds-db:connect
              Resource: !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:${ParameterTextExtractionDBResourceId}/${ParameterTextExtractionDBUsername}"          
      VpcConfig:
        SecurityGroupIds:
          - sg-073682cf5309adfc0
        SubnetIds:
          - subnet-52eba079
          - subnet-2a16c577
          - subnet-dcb272a4
          - subnet-e96a88a3              
      Events:
        Api:
          Type: Api
          Properties:
            Path: /documents/{id}
            Method: DELETE

  PostDocumentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/src
      Handler: handlers/post-document.postItemHandler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: Uploads a document to the documents workstream.
      Environment:
        Variables:
          DOCUMENT_BUCKET: !Ref MainDocumentBucket
          UPLOAD_EXPIRATION_SECONDS: 300
          LOG_LEVEL: !Ref ParameterDefaultLogLevel
          ENVIRONMENT: !Ref ParameterDefaultEnvironment
          TEXTEXTRACTION_HOST: !Ref ParameterTextExtractionDBHost
          TEXTEXTRACTION_PORT: !Ref ParameterTextExtractionDBPort
          TEXTEXTRACTION_REGION: !Ref ParameterTextExtractionDBRegion
          TEXTEXTRACTION_DATABASE: !Ref ParameterTextExtractionDBName
          TEXTEXTRACTION_USERNAME: !Ref ParameterTextExtractionDBUsername
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref MainDocumentBucket        
        -
          Version:  '2012-10-17'
          Statement:
            - Effect: Allow
              Action: rds-db:connect
              Resource: !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:${ParameterTextExtractionDBResourceId}/${ParameterTextExtractionDBUsername}"
      VpcConfig:
        SecurityGroupIds:
          - sg-073682cf5309adfc0
        SubnetIds:
          - subnet-52eba079
          - subnet-2a16c577
          - subnet-dcb272a4
          - subnet-e96a88a3              
      Events:
        Api:
          Type: Api
          Properties:
            Path: /documents/
            Method: POST

  #STATE MACHINE RESOURCES
  TextExtractionStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: services/statemachine/text_extraction.asl.json
      DefinitionSubstitutions:
        FileTypeFunctionArn: !GetAtt FileTypeFunction.Arn
        PDFConverterFunctionArn: !GetAtt PDFConverterFunction.Arn
        TextExtractionFunctionArn: !GetAtt TextExtractionFunction.Arn
        FileUpdaterFunctionArn: !GetAtt FileUpdaterFunction.Arn
      Events:
        MainS3Event:
          Type: EventBridgeRule #https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-statemachine-statemachineeventsource.html
          Properties:
            # Description: Run state machine when new file is placed in target S3 bucket.
            Pattern:
              source:
                - "aws.s3"
              detail:
                eventSource:
                  - s3.amazonaws.com
                eventName:
                  - PutObject
                requestParameters:
                  bucketName:
                    - !Ref MainDocumentBucket
      Policies: # SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref FileTypeFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref PDFConverterFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref TextExtractionFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref FileUpdaterFunction     

  FileTypeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/functions/file_checker/
      Handler: app.lambda_handler
      Runtime: python3.8
      Timeout: 60
      MemorySize: 128
      Layers:
        - Ref: TextExtractionPopplerLayer
      Environment:
        Variables:
          DOCUMENT_BUCKET: !Ref MainDocumentBucket
          PROCESSED_BUCKET: !Ref ProcessedDocumentBucket
          LOG_LEVEL: !Ref ParameterDefaultLogLevel
          ENVIRONMENT: !Ref ParameterDefaultEnvironment
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref MainDocumentBucket
        
                    
  PDFConverterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/functions/pdf_converter/
      Handler: app.lambda_handler
      Runtime: python3.8
      Timeout: 600
      MemorySize: 1769 # 1 vCPU
      Layers:
        - Ref: TextExtractionPopplerLayer
        - Ref: TextExtractionLibLayer
      Environment:
        Variables:
          DOCUMENT_BUCKET: !Ref MainDocumentBucket
          PROCESSED_BUCKET: !Ref ProcessedDocumentBucket
          FONTCONFIG_PATH: /var/task/fonts
          LOG_LEVEL: !Ref ParameterDefaultLogLevel
          ENVIRONMENT: !Ref ParameterDefaultEnvironment
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref MainDocumentBucket
        - S3WritePolicy:
            BucketName: !Ref ProcessedDocumentBucket        

  TextExtractionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/functions/text_extractor/
      Handler: app.lambda_handler
      Runtime: python3.8
      Timeout: 600
      MemorySize: 7076 # 1 vCPU
      Layers:
        - Ref: TextExtractionTessOpenCVLayer
        - Ref: TextExtractionTessDataEngLayer        
        - Ref: TextExtractionLibLayer
      Environment:
        Variables:
          DOCUMENT_BUCKET: !Ref MainDocumentBucket
          PROCESSED_BUCKET: !Ref ProcessedDocumentBucket
          LOG_LEVEL: !Ref ParameterDefaultLogLevel
          ENVIRONMENT: !Ref ParameterDefaultEnvironment
          NUMBER_PROCESSES: 4
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref MainDocumentBucket        
        - S3CrudPolicy:
            BucketName: !Ref ProcessedDocumentBucket

  FileUpdaterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: services/functions/file_updater/
      Handler: app.lambda_handler
      Runtime: python3.8
      Timeout: 30
      MemorySize: 128 # 1 vCPU
      Layers:
        - Ref: TextExtractionTessOpenCVLayer
        - Ref: TextExtractionTessDataEngLayer
      Environment:
        Variables:
          DOCUMENT_BUCKET: !Ref MainDocumentBucket
          PROCESSED_BUCKET: !Ref ProcessedDocumentBucket
          LOG_LEVEL: !Ref ParameterDefaultLogLevel
          ENVIRONMENT: !Ref ParameterDefaultEnvironment
          TEXTEXTRACTION_HOST: !Ref ParameterTextExtractionDBHost
          TEXTEXTRACTION_PORT: !Ref ParameterTextExtractionDBPort
          TEXTEXTRACTION_REGION: !Ref ParameterTextExtractionDBRegion
          TEXTEXTRACTION_DATABASE: !Ref ParameterTextExtractionDBName
          TEXTEXTRACTION_USERNAME: !Ref ParameterTextExtractionDBUsername
      Policies:
        -
          Version:  '2012-10-17'
          Statement:
            - Effect: Allow
              Action: rds-db:connect
              Resource: !Sub "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:${ParameterTextExtractionDBResourceId}/${ParameterTextExtractionDBUsername}"
      VpcConfig:
        SecurityGroupIds:
          - sg-073682cf5309adfc0
        SubnetIds:
          - subnet-52eba079
          - subnet-2a16c577
          - subnet-dcb272a4
          - subnet-e96a88a3

  TextExtractionPopplerLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: text-extraction-poppler
      Description: Poppler libraries with dependencies
      ContentUri: services/layers/textextraction/poppler/layer.zip
      CompatibleRuntimes:
        - python3.8
        - provided.al2

  TextExtractionTesseractLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: text-extraction-tesseract
      Description: Tesseract library with dependencies
      ContentUri: services/layers/textextraction/tesseract/layer.zip
      CompatibleRuntimes:
        - python3.8
        - provided.al2

  TextExtractionTessDataEngLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: text-extraction-tessdata-eng
      Description: English tessdata
      ContentUri: services/layers/textextraction/tessdata-eng/layer.zip
      CompatibleRuntimes:
        - python3.8
        - provided.al2

  TextExtractionTessOpenCVLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: text-extraction-tesseract-opencv
      Description: Tesseract and Open CV libraries with dependencies
      ContentUri: services/layers/textextraction/opencv/layer.zip
      CompatibleRuntimes:
        - python3.8
        - provided.al2

  TextExtractionLibLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: text-extraction-lib
      Description: Text extraction common library
      ContentUri: services/libs/
      CompatibleRuntimes:
        - python3.8

  LogMainDocumentBucketPutEvent:
    DependsOn: 
      - MainDocumentBucketLogPolicy
    Type: AWS::CloudTrail::Trail
    Properties:
      IsLogging: true
      S3BucketName: !Ref MainDocumentBucketLogging
      EventSelectors:
        - DataResources:
            - Type: AWS::S3::Object
              Values:
                - !Sub arn:aws:s3:::${MainDocumentBucket}/

  MainDocumentBucket:
    Type: AWS::S3::Bucket

  ProcessedDocumentBucket:
    Type: AWS::S3::Bucket

  MainDocumentBucketLogging:
    Type: AWS::S3::Bucket

  MainDocumentBucketLogPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: 
        Ref: MainDocumentBucketLogging
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Sid: "AWSCloudTrailAclCheck"
            Effect: "Allow"
            Principal: 
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:GetBucketAcl"
            Resource: 
              !Sub |-
                arn:aws:s3:::${MainDocumentBucketLogging}
          - 
            Sid: "AWSCloudTrailWrite"
            Effect: "Allow"
            Principal: 
              Service: "cloudtrail.amazonaws.com"
            Action: "s3:PutObject"
            Resource:
              !Sub |-
                arn:aws:s3:::${MainDocumentBucketLogging}/AWSLogs/${AWS::AccountId}/*
            Condition: 
              StringEquals:
                s3:x-amz-acl: "bucket-owner-full-control"
  
  # WEB CLIENT RESOURCES
  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Serverless website OA'

  CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for text extraction web client"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        Origins:
          - Id: textextraction-webclient
            DomainName: !GetAtt WebClientBucket.RegionalDomainName
            S3OriginConfig:
              # Access bucket through an origin access identity
              OriginAccessIdentity: 
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        DefaultCacheBehavior: # Deprecated - Need to define cache policy instead.
          Compress: 'true'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: textextraction-webclient
          ForwardedValues:
            QueryString: true
          ViewerProtocolPolicy : redirect-to-https
        CustomErrorResponses:
        - ErrorCode: '403'
          ResponsePagePath: "/index.html"
          ResponseCode: '200'
          ErrorCachingMinTTL: '30'

  WebClientBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: textextractionwebclient
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  WebClientBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebClientBucket
      PolicyDocument:
        Statement:
          -
            Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${WebClientBucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"

Outputs:
  #API RESOURCES
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  # STATE MACHINE RESOURCES
  TextExtractionStateMachineArn:
    Description: "Text extraction state machine ARN"
    Value: !Ref TextExtractionStateMachine
  TextExtractionStateMachineRoleArn:
    Description: "IAM Role created for text extraction state machine based on the specified SAM Policy Templates"
    Value: !GetAtt TextExtractionStateMachineRole.Arn
